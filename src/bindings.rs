/* automatically generated by rust-bindgen 0.63.0 */

pub const __MINGW64_VERSION_MAJOR: u32 = 10;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6usize] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92usize] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117usize] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 3584;
pub const _WIN32_WINNT: u32 = 2560;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 0;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const CLAP_VERSION_MAJOR: u32 = 1;
pub const CLAP_VERSION_MINOR: u32 = 1;
pub const CLAP_VERSION_REVISION: u32 = 6;
pub const CLAP_PLUGIN_FEATURE_INSTRUMENT: &[u8; 11usize] = b"instrument\0";
pub const CLAP_PLUGIN_FEATURE_AUDIO_EFFECT: &[u8; 13usize] = b"audio-effect\0";
pub const CLAP_PLUGIN_FEATURE_NOTE_EFFECT: &[u8; 12usize] = b"note-effect\0";
pub const CLAP_PLUGIN_FEATURE_ANALYZER: &[u8; 9usize] = b"analyzer\0";
pub const CLAP_PLUGIN_FEATURE_SYNTHESIZER: &[u8; 12usize] = b"synthesizer\0";
pub const CLAP_PLUGIN_FEATURE_SAMPLER: &[u8; 8usize] = b"sampler\0";
pub const CLAP_PLUGIN_FEATURE_DRUM: &[u8; 5usize] = b"drum\0";
pub const CLAP_PLUGIN_FEATURE_DRUM_MACHINE: &[u8; 13usize] = b"drum-machine\0";
pub const CLAP_PLUGIN_FEATURE_FILTER: &[u8; 7usize] = b"filter\0";
pub const CLAP_PLUGIN_FEATURE_PHASER: &[u8; 7usize] = b"phaser\0";
pub const CLAP_PLUGIN_FEATURE_EQUALIZER: &[u8; 10usize] = b"equalizer\0";
pub const CLAP_PLUGIN_FEATURE_DEESSER: &[u8; 9usize] = b"de-esser\0";
pub const CLAP_PLUGIN_FEATURE_PHASE_VOCODER: &[u8; 14usize] = b"phase-vocoder\0";
pub const CLAP_PLUGIN_FEATURE_GRANULAR: &[u8; 9usize] = b"granular\0";
pub const CLAP_PLUGIN_FEATURE_FREQUENCY_SHIFTER: &[u8; 18usize] = b"frequency-shifter\0";
pub const CLAP_PLUGIN_FEATURE_PITCH_SHIFTER: &[u8; 14usize] = b"pitch-shifter\0";
pub const CLAP_PLUGIN_FEATURE_DISTORTION: &[u8; 11usize] = b"distortion\0";
pub const CLAP_PLUGIN_FEATURE_TRANSIENT_SHAPER: &[u8; 17usize] = b"transient-shaper\0";
pub const CLAP_PLUGIN_FEATURE_COMPRESSOR: &[u8; 11usize] = b"compressor\0";
pub const CLAP_PLUGIN_FEATURE_LIMITER: &[u8; 8usize] = b"limiter\0";
pub const CLAP_PLUGIN_FEATURE_FLANGER: &[u8; 8usize] = b"flanger\0";
pub const CLAP_PLUGIN_FEATURE_CHORUS: &[u8; 7usize] = b"chorus\0";
pub const CLAP_PLUGIN_FEATURE_DELAY: &[u8; 6usize] = b"delay\0";
pub const CLAP_PLUGIN_FEATURE_REVERB: &[u8; 7usize] = b"reverb\0";
pub const CLAP_PLUGIN_FEATURE_TREMOLO: &[u8; 8usize] = b"tremolo\0";
pub const CLAP_PLUGIN_FEATURE_GLITCH: &[u8; 7usize] = b"glitch\0";
pub const CLAP_PLUGIN_FEATURE_UTILITY: &[u8; 8usize] = b"utility\0";
pub const CLAP_PLUGIN_FEATURE_PITCH_CORRECTION: &[u8; 17usize] = b"pitch-correction\0";
pub const CLAP_PLUGIN_FEATURE_RESTORATION: &[u8; 12usize] = b"restoration\0";
pub const CLAP_PLUGIN_FEATURE_MULTI_EFFECTS: &[u8; 14usize] = b"multi-effects\0";
pub const CLAP_PLUGIN_FEATURE_MIXING: &[u8; 7usize] = b"mixing\0";
pub const CLAP_PLUGIN_FEATURE_MASTERING: &[u8; 10usize] = b"mastering\0";
pub const CLAP_PLUGIN_FEATURE_MONO: &[u8; 5usize] = b"mono\0";
pub const CLAP_PLUGIN_FEATURE_STEREO: &[u8; 7usize] = b"stereo\0";
pub const CLAP_PLUGIN_FEATURE_SURROUND: &[u8; 9usize] = b"surround\0";
pub const CLAP_PLUGIN_FEATURE_AMBISONIC: &[u8; 10usize] = b"ambisonic\0";
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type rsize_t = usize;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[test]
fn bindgen_test_layout_localeinfo_struct() {
    const UNINIT: ::std::mem::MaybeUninit<localeinfo_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<localeinfo_struct>(),
        16usize,
        concat!("Size of: ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<localeinfo_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(localeinfo_struct),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(localeinfo_struct),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tagLC_ID() {
    const UNINIT: ::std::mem::MaybeUninit<tagLC_ID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagLC_ID>(),
        6usize,
        concat!("Size of: ", stringify!(tagLC_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<tagLC_ID>(),
        2usize,
        concat!("Alignment of ", stringify!(tagLC_ID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLanguage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagLC_ID),
            "::",
            stringify!(wLanguage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wCountry) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagLC_ID),
            "::",
            stringify!(wCountry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wCodePage) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagLC_ID),
            "::",
            stringify!(wCodePage)
        )
    );
}
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct() {
    const UNINIT: ::std::mem::MaybeUninit<threadlocaleinfostruct> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<threadlocaleinfostruct>(),
        16usize,
        concat!("Size of: ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        ::std::mem::align_of::<threadlocaleinfostruct>(),
        8usize,
        concat!("Alignment of ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_version {
    pub major: u32,
    pub minor: u32,
    pub revision: u32,
}
#[test]
fn bindgen_test_layout_clap_version() {
    const UNINIT: ::std::mem::MaybeUninit<clap_version> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_version>(),
        12usize,
        concat!("Size of: ", stringify!(clap_version))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_version>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_version),
            "::",
            stringify!(revision)
        )
    );
}
pub type clap_version_t = clap_version;
extern "C" {
    pub static CLAP_VERSION: clap_version_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_entry {
    pub clap_version: clap_version_t,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(plugin_path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub deinit: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_factory: ::std::option::Option<
        unsafe extern "C" fn(
            factory_id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_entry() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_entry>(),
        40usize,
        concat!("Size of: ", stringify!(clap_plugin_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clap_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_entry),
            "::",
            stringify!(clap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_entry),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_entry),
            "::",
            stringify!(deinit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_factory) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_entry),
            "::",
            stringify!(get_factory)
        )
    );
}
pub type clap_plugin_entry_t = clap_plugin_entry;
extern "C" {
    pub static clap_entry: clap_plugin_entry_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host {
    pub clap_version: clap_version_t,
    pub host_data: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
    pub url: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host,
            extension_id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub request_restart: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host)>,
    pub request_process: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host)>,
    pub request_callback: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host)>,
}
#[test]
fn bindgen_test_layout_clap_host() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host>(),
        88usize,
        concat!("Size of: ", stringify!(clap_host))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clap_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(clap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(host_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_extension) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(get_extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_restart) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(request_restart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_process) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(request_process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_callback) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host),
            "::",
            stringify!(request_callback)
        )
    );
}
pub type clap_host_t = clap_host;
#[doc = " We use fixed point representation of beat time and seconds time\n Usage:\n   double x = ...; // in beats\n   clap_beattime y = round(CLAP_BEATTIME_FACTOR * x);"]
pub const CLAP_BEATTIME_FACTOR: i64 = 2147483648;
pub const CLAP_SECTIME_FACTOR: i64 = 2147483648;
pub type clap_beattime = i64;
pub type clap_sectime = i64;
pub type clap_id = u32;
pub const CLAP_INVALID_ID: clap_id = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_header {
    pub size: u32,
    pub time: u32,
    pub space_id: u16,
    pub type_: u16,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_clap_event_header() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_header>(),
        16usize,
        concat!("Size of: ", stringify!(clap_event_header))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_header>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_event_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_header),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_header),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_header),
            "::",
            stringify!(space_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_header),
            "::",
            stringify!(flags)
        )
    );
}
pub type clap_event_header_t = clap_event_header;
pub const CLAP_CORE_EVENT_SPACE_ID: u16 = 0;
pub const clap_event_flags_CLAP_EVENT_IS_LIVE: clap_event_flags = 1;
pub const clap_event_flags_CLAP_EVENT_DONT_RECORD: clap_event_flags = 2;
pub type clap_event_flags = ::std::os::raw::c_uint;
pub const CLAP_EVENT_NOTE_ON: _bindgen_ty_1 = 0;
pub const CLAP_EVENT_NOTE_OFF: _bindgen_ty_1 = 1;
pub const CLAP_EVENT_NOTE_CHOKE: _bindgen_ty_1 = 2;
pub const CLAP_EVENT_NOTE_END: _bindgen_ty_1 = 3;
pub const CLAP_EVENT_NOTE_EXPRESSION: _bindgen_ty_1 = 4;
pub const CLAP_EVENT_PARAM_VALUE: _bindgen_ty_1 = 5;
pub const CLAP_EVENT_PARAM_MOD: _bindgen_ty_1 = 6;
pub const CLAP_EVENT_PARAM_GESTURE_BEGIN: _bindgen_ty_1 = 7;
pub const CLAP_EVENT_PARAM_GESTURE_END: _bindgen_ty_1 = 8;
pub const CLAP_EVENT_TRANSPORT: _bindgen_ty_1 = 9;
pub const CLAP_EVENT_MIDI: _bindgen_ty_1 = 10;
pub const CLAP_EVENT_MIDI_SYSEX: _bindgen_ty_1 = 11;
pub const CLAP_EVENT_MIDI2: _bindgen_ty_1 = 12;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_note {
    pub header: clap_event_header_t,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub velocity: f64,
}
#[test]
fn bindgen_test_layout_clap_event_note() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_note> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_note>(),
        40usize,
        concat!("Size of: ", stringify!(clap_event_note))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_note>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_note))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note),
            "::",
            stringify!(note_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocity) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note),
            "::",
            stringify!(velocity)
        )
    );
}
pub type clap_event_note_t = clap_event_note;
pub const CLAP_NOTE_EXPRESSION_VOLUME: _bindgen_ty_2 = 0;
pub const CLAP_NOTE_EXPRESSION_PAN: _bindgen_ty_2 = 1;
pub const CLAP_NOTE_EXPRESSION_TUNING: _bindgen_ty_2 = 2;
pub const CLAP_NOTE_EXPRESSION_VIBRATO: _bindgen_ty_2 = 3;
pub const CLAP_NOTE_EXPRESSION_EXPRESSION: _bindgen_ty_2 = 4;
pub const CLAP_NOTE_EXPRESSION_BRIGHTNESS: _bindgen_ty_2 = 5;
pub const CLAP_NOTE_EXPRESSION_PRESSURE: _bindgen_ty_2 = 6;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type clap_note_expression = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_note_expression {
    pub header: clap_event_header_t,
    pub expression_id: clap_note_expression,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub value: f64,
}
#[test]
fn bindgen_test_layout_clap_event_note_expression() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_note_expression> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_note_expression>(),
        40usize,
        concat!("Size of: ", stringify!(clap_event_note_expression))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_note_expression>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_note_expression))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expression_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(expression_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(note_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_note_expression),
            "::",
            stringify!(value)
        )
    );
}
pub type clap_event_note_expression_t = clap_event_note_expression;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_param_value {
    pub header: clap_event_header_t,
    pub param_id: clap_id,
    pub cookie: *mut ::std::os::raw::c_void,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub value: f64,
}
#[test]
fn bindgen_test_layout_clap_event_param_value() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_param_value> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_param_value>(),
        56usize,
        concat!("Size of: ", stringify!(clap_event_param_value))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_param_value>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_param_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(note_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_value),
            "::",
            stringify!(value)
        )
    );
}
pub type clap_event_param_value_t = clap_event_param_value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_param_mod {
    pub header: clap_event_header_t,
    pub param_id: clap_id,
    pub cookie: *mut ::std::os::raw::c_void,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub amount: f64,
}
#[test]
fn bindgen_test_layout_clap_event_param_mod() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_param_mod> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_param_mod>(),
        56usize,
        concat!("Size of: ", stringify!(clap_event_param_mod))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_param_mod>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_param_mod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(note_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_mod),
            "::",
            stringify!(amount)
        )
    );
}
pub type clap_event_param_mod_t = clap_event_param_mod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_param_gesture {
    pub header: clap_event_header_t,
    pub param_id: clap_id,
}
#[test]
fn bindgen_test_layout_clap_event_param_gesture() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_param_gesture> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_param_gesture>(),
        20usize,
        concat!("Size of: ", stringify!(clap_event_param_gesture))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_param_gesture>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_event_param_gesture))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_gesture),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_param_gesture),
            "::",
            stringify!(param_id)
        )
    );
}
pub type clap_event_param_gesture_t = clap_event_param_gesture;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_TEMPO: clap_transport_flags = 1;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_BEATS_TIMELINE: clap_transport_flags = 2;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_SECONDS_TIMELINE: clap_transport_flags = 4;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_TIME_SIGNATURE: clap_transport_flags = 8;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_PLAYING: clap_transport_flags = 16;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_RECORDING: clap_transport_flags = 32;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_LOOP_ACTIVE: clap_transport_flags = 64;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_WITHIN_PRE_ROLL: clap_transport_flags = 128;
pub type clap_transport_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_transport {
    pub header: clap_event_header_t,
    pub flags: u32,
    pub song_pos_beats: clap_beattime,
    pub song_pos_seconds: clap_sectime,
    pub tempo: f64,
    pub tempo_inc: f64,
    pub loop_start_beats: clap_beattime,
    pub loop_end_beats: clap_beattime,
    pub loop_start_seconds: clap_sectime,
    pub loop_end_seconds: clap_sectime,
    pub bar_start: clap_beattime,
    pub bar_number: i32,
    pub tsig_num: u16,
    pub tsig_denom: u16,
}
#[test]
fn bindgen_test_layout_clap_event_transport() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_transport> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_transport>(),
        104usize,
        concat!("Size of: ", stringify!(clap_event_transport))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_transport>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_transport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).song_pos_beats) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(song_pos_beats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).song_pos_seconds) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(song_pos_seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tempo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(tempo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tempo_inc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(tempo_inc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_start_beats) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(loop_start_beats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_end_beats) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(loop_end_beats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_start_seconds) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(loop_start_seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_end_seconds) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(loop_end_seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bar_start) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(bar_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bar_number) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(bar_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsig_num) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(tsig_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsig_denom) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_transport),
            "::",
            stringify!(tsig_denom)
        )
    );
}
pub type clap_event_transport_t = clap_event_transport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_midi {
    pub header: clap_event_header_t,
    pub port_index: u16,
    pub data: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_clap_event_midi() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_midi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_midi>(),
        24usize,
        concat!("Size of: ", stringify!(clap_event_midi))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_midi>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_event_midi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi),
            "::",
            stringify!(data)
        )
    );
}
pub type clap_event_midi_t = clap_event_midi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_midi_sysex {
    pub header: clap_event_header_t,
    pub port_index: u16,
    pub buffer: *const u8,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_clap_event_midi_sysex() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_midi_sysex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_midi_sysex>(),
        40usize,
        concat!("Size of: ", stringify!(clap_event_midi_sysex))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_midi_sysex>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_midi_sysex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi_sysex),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi_sysex),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi_sysex),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi_sysex),
            "::",
            stringify!(size)
        )
    );
}
pub type clap_event_midi_sysex_t = clap_event_midi_sysex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_midi2 {
    pub header: clap_event_header_t,
    pub port_index: u16,
    pub data: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_clap_event_midi2() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_midi2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_midi2>(),
        36usize,
        concat!("Size of: ", stringify!(clap_event_midi2))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_midi2>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_event_midi2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi2),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi2),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_midi2),
            "::",
            stringify!(data)
        )
    );
}
pub type clap_event_midi2_t = clap_event_midi2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_input_events {
    pub ctx: *mut ::std::os::raw::c_void,
    pub size: ::std::option::Option<unsafe extern "C" fn(list: *const clap_input_events) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            list: *const clap_input_events,
            index: u32,
        ) -> *const clap_event_header_t,
    >,
}
#[test]
fn bindgen_test_layout_clap_input_events() {
    const UNINIT: ::std::mem::MaybeUninit<clap_input_events> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_input_events>(),
        24usize,
        concat!("Size of: ", stringify!(clap_input_events))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_input_events>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_input_events))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_input_events),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_input_events),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_input_events),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_input_events_t = clap_input_events;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_output_events {
    pub ctx: *mut ::std::os::raw::c_void,
    pub try_push: ::std::option::Option<
        unsafe extern "C" fn(
            list: *const clap_output_events,
            event: *const clap_event_header_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_output_events() {
    const UNINIT: ::std::mem::MaybeUninit<clap_output_events> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_output_events>(),
        16usize,
        concat!("Size of: ", stringify!(clap_output_events))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_output_events>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_output_events))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_output_events),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_push) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_output_events),
            "::",
            stringify!(try_push)
        )
    );
}
pub type clap_output_events_t = clap_output_events;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_buffer {
    pub data32: *mut *mut f32,
    pub data64: *mut *mut f64,
    pub channel_count: u32,
    pub latency: u32,
    pub constant_mask: u64,
}
#[test]
fn bindgen_test_layout_clap_audio_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<clap_audio_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_audio_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(clap_audio_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_audio_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_audio_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_buffer),
            "::",
            stringify!(data32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data64) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_buffer),
            "::",
            stringify!(data64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_buffer),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_buffer),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant_mask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_buffer),
            "::",
            stringify!(constant_mask)
        )
    );
}
pub type clap_audio_buffer_t = clap_audio_buffer;
pub const CLAP_PROCESS_ERROR: _bindgen_ty_3 = 0;
pub const CLAP_PROCESS_CONTINUE: _bindgen_ty_3 = 1;
pub const CLAP_PROCESS_CONTINUE_IF_NOT_QUIET: _bindgen_ty_3 = 2;
pub const CLAP_PROCESS_TAIL: _bindgen_ty_3 = 3;
pub const CLAP_PROCESS_SLEEP: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub type clap_process_status = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_process {
    pub steady_time: i64,
    pub frames_count: u32,
    pub transport: *const clap_event_transport_t,
    pub audio_inputs: *const clap_audio_buffer_t,
    pub audio_outputs: *mut clap_audio_buffer_t,
    pub audio_inputs_count: u32,
    pub audio_outputs_count: u32,
    pub in_events: *const clap_input_events_t,
    pub out_events: *const clap_output_events_t,
}
#[test]
fn bindgen_test_layout_clap_process() {
    const UNINIT: ::std::mem::MaybeUninit<clap_process> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_process>(),
        64usize,
        concat!("Size of: ", stringify!(clap_process))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_process>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_process))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).steady_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(steady_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frames_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(frames_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transport) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_inputs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(audio_inputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_outputs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(audio_outputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_inputs_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(audio_inputs_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_outputs_count) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(audio_outputs_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_events) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(in_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_events) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_process),
            "::",
            stringify!(out_events)
        )
    );
}
pub type clap_process_t = clap_process;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_descriptor {
    pub clap_version: clap_version_t,
    pub id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
    pub url: *const ::std::os::raw::c_char,
    pub manual_url: *const ::std::os::raw::c_char,
    pub support_url: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub features: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_clap_plugin_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_descriptor>(),
        88usize,
        concat!("Size of: ", stringify!(clap_plugin_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clap_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(clap_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manual_url) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(manual_url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).support_url) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(support_url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_descriptor),
            "::",
            stringify!(features)
        )
    );
}
pub type clap_plugin_descriptor_t = clap_plugin_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin {
    pub desc: *const clap_plugin_descriptor_t,
    pub plugin_data: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin) -> bool>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub activate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin,
            sample_rate: f64,
            min_frames_count: u32,
            max_frames_count: u32,
        ) -> bool,
    >,
    pub deactivate: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub start_processing:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin) -> bool>,
    pub stop_processing: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub process: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin,
            process: *const clap_process_t,
        ) -> clap_process_status,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin,
            id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub on_main_thread: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
}
#[test]
fn bindgen_test_layout_clap_plugin() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin>(),
        96usize,
        concat!("Size of: ", stringify!(clap_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugin_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(plugin_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deactivate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(deactivate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_processing) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(start_processing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_processing) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(stop_processing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_extension) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(get_extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_main_thread) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin),
            "::",
            stringify!(on_main_thread)
        )
    );
}
pub type clap_plugin_t = clap_plugin;
extern "C" {
    pub static CLAP_PLUGIN_FACTORY_ID: [::std::os::raw::c_char; 20usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_factory {
    pub get_plugin_count:
        ::std::option::Option<unsafe extern "C" fn(factory: *const clap_plugin_factory) -> u32>,
    pub get_plugin_descriptor: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_plugin_factory,
            index: u32,
        ) -> *const clap_plugin_descriptor_t,
    >,
    pub create_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_plugin_factory,
            host: *const clap_host_t,
            plugin_id: *const ::std::os::raw::c_char,
        ) -> *const clap_plugin_t,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_factory() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_factory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_factory>(),
        24usize,
        concat!("Size of: ", stringify!(clap_plugin_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_factory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_plugin_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_factory),
            "::",
            stringify!(get_plugin_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_plugin_descriptor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_factory),
            "::",
            stringify!(get_plugin_descriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_plugin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_factory),
            "::",
            stringify!(create_plugin)
        )
    );
}
pub type clap_plugin_factory_t = clap_plugin_factory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_invalidation_source {
    pub directory: *const ::std::os::raw::c_char,
    pub filename_glob: *const ::std::os::raw::c_char,
    pub recursive_scan: bool,
}
#[test]
fn bindgen_test_layout_clap_plugin_invalidation_source() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_invalidation_source> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_invalidation_source>(),
        24usize,
        concat!("Size of: ", stringify!(clap_plugin_invalidation_source))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_invalidation_source>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_invalidation_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directory) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_invalidation_source),
            "::",
            stringify!(directory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename_glob) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_invalidation_source),
            "::",
            stringify!(filename_glob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursive_scan) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_invalidation_source),
            "::",
            stringify!(recursive_scan)
        )
    );
}
pub type clap_plugin_invalidation_source_t = clap_plugin_invalidation_source;
extern "C" {
    pub static CLAP_PLUGIN_INVALIDATION_FACTORY_ID: [::std::os::raw::c_char; 40usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_invalidation_factory {
    pub count: ::std::option::Option<
        unsafe extern "C" fn(factory: *const clap_plugin_invalidation_factory) -> u32,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_plugin_invalidation_factory,
            index: u32,
        ) -> *const clap_plugin_invalidation_source_t,
    >,
    pub refresh: ::std::option::Option<
        unsafe extern "C" fn(factory: *const clap_plugin_invalidation_factory) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_invalidation_factory() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_invalidation_factory> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_invalidation_factory>(),
        24usize,
        concat!("Size of: ", stringify!(clap_plugin_invalidation_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_invalidation_factory>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clap_plugin_invalidation_factory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_invalidation_factory),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_invalidation_factory),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_invalidation_factory),
            "::",
            stringify!(refresh)
        )
    );
}
pub type clap_plugin_invalidation_factory_t = clap_plugin_invalidation_factory;
pub const CLAP_NAME_SIZE: _bindgen_ty_4 = 256;
pub const CLAP_PATH_SIZE: _bindgen_ty_4 = 1024;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " @page Audio Ports Config\n\n This extension provides a way for the plugin to describe possible port configurations, for\n example mono, stereo, surround, ... and a way for the host to select a configuration.\n\n After the plugin initialization, the host may scan the list of configurations and eventually\n select one that fits the plugin context. The host can only select a configuration if the plugin\n is deactivated.\n\n A configuration is a very simple description of the audio ports:\n - it describes the main input and output ports\n - it has a name that can be displayed to the user\n\n The idea behind the configurations, is to let the user choose one via a menu.\n\n Plugins with very complex configuration possibilities should let the user configure the ports\n from the plugin GUI, and call @ref clap_host_audio_ports.rescan(CLAP_AUDIO_PORTS_RESCAN_ALL)."]
    pub static CLAP_EXT_AUDIO_PORTS_CONFIG: [::std::os::raw::c_char; 24usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_ports_config {
    pub id: clap_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub input_port_count: u32,
    pub output_port_count: u32,
    pub has_main_input: bool,
    pub main_input_channel_count: u32,
    pub main_input_port_type: *const ::std::os::raw::c_char,
    pub has_main_output: bool,
    pub main_output_channel_count: u32,
    pub main_output_port_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_clap_audio_ports_config() {
    const UNINIT: ::std::mem::MaybeUninit<clap_audio_ports_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_audio_ports_config>(),
        304usize,
        concat!("Size of: ", stringify!(clap_audio_ports_config))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_audio_ports_config>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_audio_ports_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_port_count) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(input_port_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_port_count) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(output_port_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_main_input) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(has_main_input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_input_channel_count) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(main_input_channel_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_input_port_type) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(main_input_port_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_main_output) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(has_main_output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_output_channel_count) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(main_output_channel_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_output_port_type) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_ports_config),
            "::",
            stringify!(main_output_port_type)
        )
    );
}
pub type clap_audio_ports_config_t = clap_audio_ports_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports_config {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            config: *mut clap_audio_ports_config_t,
        ) -> bool,
    >,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, config_id: clap_id) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_audio_ports_config() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_audio_ports_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_audio_ports_config>(),
        24usize,
        concat!("Size of: ", stringify!(clap_plugin_audio_ports_config))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_audio_ports_config>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_audio_ports_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports_config),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports_config),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports_config),
            "::",
            stringify!(select)
        )
    );
}
pub type clap_plugin_audio_ports_config_t = clap_plugin_audio_ports_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_audio_ports_config {
    pub rescan: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_audio_ports_config() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_audio_ports_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_audio_ports_config>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_audio_ports_config))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_audio_ports_config>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_audio_ports_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rescan) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_audio_ports_config),
            "::",
            stringify!(rescan)
        )
    );
}
pub type clap_host_audio_ports_config_t = clap_host_audio_ports_config;
extern "C" {
    #[doc = " @page Audio Ports\n\n This extension provides a way for the plugin to describe its current audio ports.\n\n If the plugin does not implement this extension, it won't have audio ports.\n\n 32 bits support is required for both host and plugins. 64 bits audio is optional.\n\n The plugin is only allowed to change its ports configuration while it is deactivated."]
    pub static CLAP_EXT_AUDIO_PORTS: [::std::os::raw::c_char; 17usize];
}
extern "C" {
    pub static CLAP_PORT_MONO: [::std::os::raw::c_char; 5usize];
}
extern "C" {
    pub static CLAP_PORT_STEREO: [::std::os::raw::c_char; 7usize];
}
pub const CLAP_AUDIO_PORT_IS_MAIN: _bindgen_ty_5 = 1;
pub const CLAP_AUDIO_PORT_SUPPORTS_64BITS: _bindgen_ty_5 = 2;
pub const CLAP_AUDIO_PORT_PREFERS_64BITS: _bindgen_ty_5 = 4;
pub const CLAP_AUDIO_PORT_REQUIRES_COMMON_SAMPLE_SIZE: _bindgen_ty_5 = 8;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_port_info {
    pub id: clap_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub flags: u32,
    pub channel_count: u32,
    pub port_type: *const ::std::os::raw::c_char,
    pub in_place_pair: clap_id,
}
#[test]
fn bindgen_test_layout_clap_audio_port_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_audio_port_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_audio_port_info>(),
        288usize,
        concat!("Size of: ", stringify!(clap_audio_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_audio_port_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_audio_port_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_port_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_port_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_port_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_count) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_port_info),
            "::",
            stringify!(channel_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_type) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_port_info),
            "::",
            stringify!(port_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_place_pair) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_audio_port_info),
            "::",
            stringify!(in_place_pair)
        )
    );
}
pub type clap_audio_port_info_t = clap_audio_port_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports {
    pub count: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, is_input: bool) -> u32,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            is_input: bool,
            info: *mut clap_audio_port_info_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_audio_ports() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_audio_ports> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_audio_ports>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_audio_ports))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_audio_ports>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_audio_ports))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_audio_ports_t = clap_plugin_audio_ports;
pub const CLAP_AUDIO_PORTS_RESCAN_NAMES: _bindgen_ty_6 = 1;
pub const CLAP_AUDIO_PORTS_RESCAN_FLAGS: _bindgen_ty_6 = 2;
pub const CLAP_AUDIO_PORTS_RESCAN_CHANNEL_COUNT: _bindgen_ty_6 = 4;
pub const CLAP_AUDIO_PORTS_RESCAN_PORT_TYPE: _bindgen_ty_6 = 8;
pub const CLAP_AUDIO_PORTS_RESCAN_IN_PLACE_PAIR: _bindgen_ty_6 = 16;
pub const CLAP_AUDIO_PORTS_RESCAN_LIST: _bindgen_ty_6 = 32;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_audio_ports {
    pub is_rescan_flag_supported:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, flag: u32) -> bool>,
    pub rescan: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, flags: u32)>,
}
#[test]
fn bindgen_test_layout_clap_host_audio_ports() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_audio_ports> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_audio_ports>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_audio_ports))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_audio_ports>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_audio_ports))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_rescan_flag_supported) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_audio_ports),
            "::",
            stringify!(is_rescan_flag_supported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rescan) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_audio_ports),
            "::",
            stringify!(rescan)
        )
    );
}
pub type clap_host_audio_ports_t = clap_host_audio_ports;
extern "C" {
    pub static CLAP_EXT_EVENT_REGISTRY: [::std::os::raw::c_char; 20usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_event_registry {
    pub query: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            space_name: *const ::std::os::raw::c_char,
            space_id: *mut u16,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_event_registry() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_event_registry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_event_registry>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_event_registry))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_event_registry>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_event_registry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_event_registry),
            "::",
            stringify!(query)
        )
    );
}
pub type clap_host_event_registry_t = clap_host_event_registry;
extern "C" {
    #[doc = " @page GUI\n\n This extension defines how the plugin will present its GUI.\n\n There are two approaches:\n 1. the plugin creates a window and embeds it into the host's window\n 2. the plugin creates a floating window\n\n Embedding the window gives more control to the host, and feels more integrated.\n Floating window are sometimes the only option due to technical limitations.\n\n Showing the GUI works as follow:\n  1. clap_plugin_gui->is_api_supported(), check what can work\n  2. clap_plugin_gui->create(), allocates gui resources\n  3. if the plugin window is floating\n  4.    -> clap_plugin_gui->set_transient()\n  5.    -> clap_plugin_gui->suggest_title()\n  6. else\n  7.    -> clap_plugin_gui->set_scale()\n  8.    -> clap_plugin_gui->can_resize()\n  9.    -> if resizable and has known size from previous session, clap_plugin_gui->set_size()\n 10.    -> else clap_plugin_gui->get_size(), gets initial size\n 11.    -> clap_plugin_gui->set_parent()\n 12. clap_plugin_gui->show()\n 13. clap_plugin_gui->hide()/show() ...\n 14. clap_plugin_gui->destroy() when done with the gui\n\n Resizing the window (initiated by the plugin, if embedded):\n 1. Plugins calls clap_host_gui->request_resize()\n 2. If the host returns true the new size is accepted,\n    the host doesn't have to call clap_plugin_gui->set_size().\n    If the host returns false, the new size is rejected.\n\n Resizing the window (drag, if embedded)):\n 1. Only possible if clap_plugin_gui->can_resize() returns true\n 2. Mouse drag -> new_size\n 3. clap_plugin_gui->adjust_size(new_size) -> working_size\n 4. clap_plugin_gui->set_size(working_size)"]
    pub static CLAP_EXT_GUI: [::std::os::raw::c_char; 9usize];
}
extern "C" {
    pub static CLAP_WINDOW_API_WIN32: [::std::os::raw::c_char; 6usize];
}
extern "C" {
    pub static CLAP_WINDOW_API_COCOA: [::std::os::raw::c_char; 6usize];
}
extern "C" {
    pub static CLAP_WINDOW_API_X11: [::std::os::raw::c_char; 4usize];
}
extern "C" {
    pub static CLAP_WINDOW_API_WAYLAND: [::std::os::raw::c_char; 8usize];
}
pub type clap_hwnd = *mut ::std::os::raw::c_void;
pub type clap_nsview = *mut ::std::os::raw::c_void;
pub type clap_xwnd = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clap_window {
    pub api: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: clap_window__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clap_window__bindgen_ty_1 {
    pub cocoa: clap_nsview,
    pub x11: clap_xwnd,
    pub win32: clap_hwnd,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_clap_window__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<clap_window__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_window__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(clap_window__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_window__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_window__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cocoa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_window__bindgen_ty_1),
            "::",
            stringify!(cocoa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x11) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_window__bindgen_ty_1),
            "::",
            stringify!(x11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_window__bindgen_ty_1),
            "::",
            stringify!(win32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_window__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_clap_window() {
    const UNINIT: ::std::mem::MaybeUninit<clap_window> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_window>(),
        16usize,
        concat!("Size of: ", stringify!(clap_window))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_window>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_window))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_window),
            "::",
            stringify!(api)
        )
    );
}
pub type clap_window_t = clap_window;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_gui_resize_hints {
    pub can_resize_horizontally: bool,
    pub can_resize_vertically: bool,
    pub preserve_aspect_ratio: bool,
    pub aspect_ratio_width: u32,
    pub aspect_ratio_height: u32,
}
#[test]
fn bindgen_test_layout_clap_gui_resize_hints() {
    const UNINIT: ::std::mem::MaybeUninit<clap_gui_resize_hints> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_gui_resize_hints>(),
        12usize,
        concat!("Size of: ", stringify!(clap_gui_resize_hints))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_gui_resize_hints>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_gui_resize_hints))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_resize_horizontally) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_gui_resize_hints),
            "::",
            stringify!(can_resize_horizontally)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_resize_vertically) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_gui_resize_hints),
            "::",
            stringify!(can_resize_vertically)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preserve_aspect_ratio) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_gui_resize_hints),
            "::",
            stringify!(preserve_aspect_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_gui_resize_hints),
            "::",
            stringify!(aspect_ratio_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio_height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_gui_resize_hints),
            "::",
            stringify!(aspect_ratio_height)
        )
    );
}
pub type clap_gui_resize_hints_t = clap_gui_resize_hints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_gui {
    pub is_api_supported: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            api: *const ::std::os::raw::c_char,
            is_floating: bool,
        ) -> bool,
    >,
    pub get_preferred_api: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            api: *mut *const ::std::os::raw::c_char,
            is_floating: *mut bool,
        ) -> bool,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            api: *const ::std::os::raw::c_char,
            is_floating: bool,
        ) -> bool,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t)>,
    pub set_scale: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, scale: f64) -> bool,
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            width: *mut u32,
            height: *mut u32,
        ) -> bool,
    >,
    pub can_resize:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub get_resize_hints: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            hints: *mut clap_gui_resize_hints_t,
        ) -> bool,
    >,
    pub adjust_size: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            width: *mut u32,
            height: *mut u32,
        ) -> bool,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, width: u32, height: u32) -> bool,
    >,
    pub set_parent: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, window: *const clap_window_t) -> bool,
    >,
    pub set_transient: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, window: *const clap_window_t) -> bool,
    >,
    pub suggest_title: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, title: *const ::std::os::raw::c_char),
    >,
    pub show: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub hide: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
}
#[test]
fn bindgen_test_layout_clap_plugin_gui() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_gui> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_gui>(),
        120usize,
        concat!("Size of: ", stringify!(clap_plugin_gui))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_gui>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_gui))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_api_supported) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(is_api_supported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_preferred_api) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(get_preferred_api)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_scale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(set_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_resize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(can_resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_resize_hints) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(get_resize_hints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjust_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(adjust_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_parent) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(set_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_transient) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(set_transient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggest_title) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(suggest_title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(show)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hide) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_gui),
            "::",
            stringify!(hide)
        )
    );
}
pub type clap_plugin_gui_t = clap_plugin_gui;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_gui {
    pub resize_hints_changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
    pub request_resize: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, width: u32, height: u32) -> bool,
    >,
    pub request_show: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub request_hide: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub closed:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, was_destroyed: bool)>,
}
#[test]
fn bindgen_test_layout_clap_host_gui() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_gui> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_gui>(),
        40usize,
        concat!("Size of: ", stringify!(clap_host_gui))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_gui>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_gui))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resize_hints_changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_gui),
            "::",
            stringify!(resize_hints_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_resize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_gui),
            "::",
            stringify!(request_resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_show) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_gui),
            "::",
            stringify!(request_show)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_hide) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_gui),
            "::",
            stringify!(request_hide)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_gui),
            "::",
            stringify!(closed)
        )
    );
}
pub type clap_host_gui_t = clap_host_gui;
extern "C" {
    pub static CLAP_EXT_LATENCY: [::std::os::raw::c_char; 13usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_latency {
    pub get: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
}
#[test]
fn bindgen_test_layout_clap_plugin_latency() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_latency> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_latency>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_latency))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_latency>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_latency))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_latency),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_latency_t = clap_plugin_latency;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_latency {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_latency() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_latency> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_latency>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_latency))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_latency>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_latency))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_latency),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_latency_t = clap_host_latency;
extern "C" {
    pub static CLAP_EXT_LOG: [::std::os::raw::c_char; 9usize];
}
pub const CLAP_LOG_DEBUG: _bindgen_ty_7 = 0;
pub const CLAP_LOG_INFO: _bindgen_ty_7 = 1;
pub const CLAP_LOG_WARNING: _bindgen_ty_7 = 2;
pub const CLAP_LOG_ERROR: _bindgen_ty_7 = 3;
pub const CLAP_LOG_FATAL: _bindgen_ty_7 = 4;
pub const CLAP_LOG_HOST_MISBEHAVING: _bindgen_ty_7 = 5;
pub const CLAP_LOG_PLUGIN_MISBEHAVING: _bindgen_ty_7 = 6;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub type clap_log_severity = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_log {
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            severity: clap_log_severity,
            msg: *const ::std::os::raw::c_char,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_host_log() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_log> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_log>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_log))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_log>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_log))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_log),
            "::",
            stringify!(log)
        )
    );
}
pub type clap_host_log_t = clap_host_log;
extern "C" {
    pub static CLAP_EXT_NOTE_NAME: [::std::os::raw::c_char; 15usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_note_name {
    pub name: [::std::os::raw::c_char; 256usize],
    pub port: i16,
    pub key: i16,
    pub channel: i16,
}
#[test]
fn bindgen_test_layout_clap_note_name() {
    const UNINIT: ::std::mem::MaybeUninit<clap_note_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_note_name>(),
        262usize,
        concat!("Size of: ", stringify!(clap_note_name))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_note_name>(),
        2usize,
        concat!("Alignment of ", stringify!(clap_note_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_name),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_name),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_name),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_name),
            "::",
            stringify!(channel)
        )
    );
}
pub type clap_note_name_t = clap_note_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_note_name {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            note_name: *mut clap_note_name_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_note_name() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_note_name> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_note_name>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_note_name))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_note_name>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_note_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_note_name),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_note_name),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_note_name_t = clap_plugin_note_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_note_name {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_note_name() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_note_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_note_name>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_note_name))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_note_name>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_note_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_note_name),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_note_name_t = clap_host_note_name;
extern "C" {
    #[doc = " @page Note Ports\n\n This extension provides a way for the plugin to describe its current note ports.\n If the plugin does not implement this extension, it won't have note input or output.\n The plugin is only allowed to change its note ports configuration while it is deactivated."]
    pub static CLAP_EXT_NOTE_PORTS: [::std::os::raw::c_char; 16usize];
}
pub const clap_note_dialect_CLAP_NOTE_DIALECT_CLAP: clap_note_dialect = 1;
pub const clap_note_dialect_CLAP_NOTE_DIALECT_MIDI: clap_note_dialect = 2;
pub const clap_note_dialect_CLAP_NOTE_DIALECT_MIDI_MPE: clap_note_dialect = 4;
pub const clap_note_dialect_CLAP_NOTE_DIALECT_MIDI2: clap_note_dialect = 8;
pub type clap_note_dialect = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_note_port_info {
    pub id: clap_id,
    pub supported_dialects: u32,
    pub preferred_dialect: u32,
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_clap_note_port_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_note_port_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_note_port_info>(),
        268usize,
        concat!("Size of: ", stringify!(clap_note_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_note_port_info>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_note_port_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_port_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_dialects) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_port_info),
            "::",
            stringify!(supported_dialects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferred_dialect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_port_info),
            "::",
            stringify!(preferred_dialect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_note_port_info),
            "::",
            stringify!(name)
        )
    );
}
pub type clap_note_port_info_t = clap_note_port_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_note_ports {
    pub count: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, is_input: bool) -> u32,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            is_input: bool,
            info: *mut clap_note_port_info_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_note_ports() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_note_ports> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_note_ports>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_note_ports))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_note_ports>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_note_ports))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_note_ports),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_note_ports),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_note_ports_t = clap_plugin_note_ports;
pub const CLAP_NOTE_PORTS_RESCAN_ALL: _bindgen_ty_8 = 1;
pub const CLAP_NOTE_PORTS_RESCAN_NAMES: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_note_ports {
    pub supported_dialects:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> u32>,
    pub rescan: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, flags: u32)>,
}
#[test]
fn bindgen_test_layout_clap_host_note_ports() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_note_ports> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_note_ports>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_note_ports))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_note_ports>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_note_ports))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_dialects) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_note_ports),
            "::",
            stringify!(supported_dialects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rescan) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_note_ports),
            "::",
            stringify!(rescan)
        )
    );
}
pub type clap_host_note_ports_t = clap_host_note_ports;
extern "C" {
    #[doc = " @page Parameters\n @brief parameters management\n\n Main idea:\n\n The host sees the plugin as an atomic entity; and acts as a controller on top of its parameters.\n The plugin is responsible for keeping its audio processor and its GUI in sync.\n\n The host can at any time read parameters' value on the [main-thread] using\n @ref clap_plugin_params.value().\n\n There are two options to communicate parameter value changes, and they are not concurrent.\n - send automation points during clap_plugin.process()\n - send automation points during clap_plugin_params.flush(), for parameter changes\n   without processing audio\n\n When the plugin changes a parameter value, it must inform the host.\n It will send @ref CLAP_EVENT_PARAM_VALUE event during process() or flush().\n If the user is adjusting the value, don't forget to mark the begining and end\n of the gesture by sending CLAP_EVENT_PARAM_GESTURE_BEGIN and CLAP_EVENT_PARAM_GESTURE_END\n events.\n\n @note MIDI CCs are tricky because you may not know when the parameter adjustment ends.\n Also if the host records incoming MIDI CC and parameter change automation at the same time,\n there will be a conflict at playback: MIDI CC vs Automation.\n The parameter automation will always target the same parameter because the param_id is stable.\n The MIDI CC may have a different mapping in the future and may result in a different playback.\n\n When a MIDI CC changes a parameter's value, set the flag CLAP_EVENT_DONT_RECORD in\n clap_event_param.header.flags. That way the host may record the MIDI CC automation, but not the\n parameter change and there won't be conflict at playback.\n\n Scenarios:\n\n I. Loading a preset\n - load the preset in a temporary state\n - call @ref clap_host_params.rescan() if anything changed\n - call @ref clap_host_latency.changed() if latency changed\n - invalidate any other info that may be cached by the host\n - if the plugin is activated and the preset will introduce breaking changes\n   (latency, audio ports, new parameters, ...) be sure to wait for the host\n   to deactivate the plugin to apply those changes.\n   If there are no breaking changes, the plugin can apply them them right away.\n   The plugin is resonsible for updating both its audio processor and its gui.\n\n II. Turning a knob on the DAW interface\n - the host will send an automation event to the plugin via a process() or flush()\n\n III. Turning a knob on the Plugin interface\n - the plugin is responsible for sending the parameter value to its audio processor\n - call clap_host_params->request_flush() or clap_host->request_process().\n - when the host calls either clap_plugin->process() or clap_plugin_params->flush(),\n   send an automation event and don't forget to set begin_adjust,\n   end_adjust and should_record flags\n\n IV. Turning a knob via automation\n - host sends an automation point during clap_plugin->process() or clap_plugin_params->flush().\n - the plugin is responsible for updating its GUI\n\n V. Turning a knob via plugin's internal MIDI mapping\n - the plugin sends a CLAP_EVENT_PARAM_SET output event, set should_record to false\n - the plugin is responsible to update its GUI\n\n VI. Adding or removing parameters\n - if the plugin is activated call clap_host->restart()\n - once the plugin isn't active:\n   - apply the new state\n   - if a parameter is gone or is created with an id that may have been used before,\n     call clap_host_params.clear(host, param_id, CLAP_PARAM_CLEAR_ALL)\n   - call clap_host_params->rescan(CLAP_PARAM_RESCAN_ALL)\n\n CLAP allows the plugin to change the parameter range, yet the plugin developper\n should be aware that doing so isn't without risk, especially if you made the\n promise to never change the sound. If you want to be 100% certain that the\n sound will not change with all host, then simply never change the range.\n\n There are two approaches to automations, either you automate the plain value,\n or you automate the knob position. The first option will be robust to a range\n increase, while the second won't be.\n\n If the host goes with the second approach (automating the knob position), it means\n that the plugin is hosted in a relaxed environment regarding sound changes (they are\n accepted, and not a concern as long as they are reasonable). Though, stepped parameters\n should be stored as plain value in the document.\n\n If the host goes with the first approach, there will still be situation where the\n sound may innevitably change. For example, if the plugin increase the range, there\n is an automation playing at the max value and on top of that an LFO is applied.\n See the following curve:\n                                   .\n                                  . .\n          .....                  .   .\n before: .     .     and after: .     .\n\n Advice for the host:\n - store plain values in the document (automation)\n - store modulation amount in plain value delta, not in percentage\n - when you apply a CC mapping, remember the min/max plain values so you can adjust\n\n Advice for the plugin:\n - think carefully about your parameter range when designing your DSP\n - avoid shrinking parameter ranges, they are very likely to change the sound\n - consider changing the parameter range as a tradeoff: what you improve vs what you break\n - if you plan to use adapters for other plugin formats, then you need to pay extra\n   attention to the adapter requirements"]
    pub static CLAP_EXT_PARAMS: [::std::os::raw::c_char; 12usize];
}
pub const CLAP_PARAM_IS_STEPPED: _bindgen_ty_9 = 1;
pub const CLAP_PARAM_IS_PERIODIC: _bindgen_ty_9 = 2;
pub const CLAP_PARAM_IS_HIDDEN: _bindgen_ty_9 = 4;
pub const CLAP_PARAM_IS_READONLY: _bindgen_ty_9 = 8;
pub const CLAP_PARAM_IS_BYPASS: _bindgen_ty_9 = 16;
pub const CLAP_PARAM_IS_AUTOMATABLE: _bindgen_ty_9 = 32;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_NOTE_ID: _bindgen_ty_9 = 64;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_KEY: _bindgen_ty_9 = 128;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_CHANNEL: _bindgen_ty_9 = 256;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_PORT: _bindgen_ty_9 = 512;
pub const CLAP_PARAM_IS_MODULATABLE: _bindgen_ty_9 = 1024;
pub const CLAP_PARAM_IS_MODULATABLE_PER_NOTE_ID: _bindgen_ty_9 = 2048;
pub const CLAP_PARAM_IS_MODULATABLE_PER_KEY: _bindgen_ty_9 = 4096;
pub const CLAP_PARAM_IS_MODULATABLE_PER_CHANNEL: _bindgen_ty_9 = 8192;
pub const CLAP_PARAM_IS_MODULATABLE_PER_PORT: _bindgen_ty_9 = 16384;
pub const CLAP_PARAM_REQUIRES_PROCESS: _bindgen_ty_9 = 32768;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub type clap_param_info_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_param_info {
    pub id: clap_id,
    pub flags: clap_param_info_flags,
    pub cookie: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub module: [::std::os::raw::c_char; 1024usize],
    pub min_value: f64,
    pub max_value: f64,
    pub default_value: f64,
}
#[test]
fn bindgen_test_layout_clap_param_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_param_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_param_info>(),
        1320usize,
        concat!("Size of: ", stringify!(clap_param_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_param_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_param_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_value) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(min_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_value) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(max_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_param_info),
            "::",
            stringify!(default_value)
        )
    );
}
pub type clap_param_info_t = clap_param_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_params {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_index: u32,
            param_info: *mut clap_param_info_t,
        ) -> bool,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            out_value: *mut f64,
        ) -> bool,
    >,
    pub value_to_text: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            value: f64,
            out_buffer: *mut ::std::os::raw::c_char,
            out_buffer_capacity: u32,
        ) -> bool,
    >,
    pub text_to_value: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            param_value_text: *const ::std::os::raw::c_char,
            out_value: *mut f64,
        ) -> bool,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            in_: *const clap_input_events_t,
            out: *const clap_output_events_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_params() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_params>(),
        48usize,
        concat!("Size of: ", stringify!(clap_plugin_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_params),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_params),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_params),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_to_text) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_params),
            "::",
            stringify!(value_to_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_to_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_params),
            "::",
            stringify!(text_to_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_params),
            "::",
            stringify!(flush)
        )
    );
}
pub type clap_plugin_params_t = clap_plugin_params;
pub const CLAP_PARAM_RESCAN_VALUES: _bindgen_ty_10 = 1;
pub const CLAP_PARAM_RESCAN_TEXT: _bindgen_ty_10 = 2;
pub const CLAP_PARAM_RESCAN_INFO: _bindgen_ty_10 = 4;
pub const CLAP_PARAM_RESCAN_ALL: _bindgen_ty_10 = 8;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type clap_param_rescan_flags = u32;
pub const CLAP_PARAM_CLEAR_ALL: _bindgen_ty_11 = 1;
pub const CLAP_PARAM_CLEAR_AUTOMATIONS: _bindgen_ty_11 = 2;
pub const CLAP_PARAM_CLEAR_MODULATIONS: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub type clap_param_clear_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_params {
    pub rescan: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, flags: clap_param_rescan_flags),
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            param_id: clap_id,
            flags: clap_param_clear_flags,
        ),
    >,
    pub request_flush: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_params() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_params>(),
        24usize,
        concat!("Size of: ", stringify!(clap_host_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rescan) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_params),
            "::",
            stringify!(rescan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_params),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_flush) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_params),
            "::",
            stringify!(request_flush)
        )
    );
}
pub type clap_host_params_t = clap_host_params;
extern "C" {
    pub static CLAP_EXT_POSIX_FD_SUPPORT: [::std::os::raw::c_char; 22usize];
}
pub const CLAP_POSIX_FD_READ: _bindgen_ty_12 = 1;
pub const CLAP_POSIX_FD_WRITE: _bindgen_ty_12 = 2;
pub const CLAP_POSIX_FD_ERROR: _bindgen_ty_12 = 4;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type clap_posix_fd_flags_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_posix_fd_support {
    pub on_fd: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            fd: ::std::os::raw::c_int,
            flags: clap_posix_fd_flags_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_posix_fd_support() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_posix_fd_support> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_posix_fd_support>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_posix_fd_support))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_posix_fd_support>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_posix_fd_support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_posix_fd_support),
            "::",
            stringify!(on_fd)
        )
    );
}
pub type clap_plugin_posix_fd_support_t = clap_plugin_posix_fd_support;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_posix_fd_support {
    pub register_fd: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            fd: ::std::os::raw::c_int,
            flags: clap_posix_fd_flags_t,
        ) -> bool,
    >,
    pub modify_fd: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            fd: ::std::os::raw::c_int,
            flags: clap_posix_fd_flags_t,
        ) -> bool,
    >,
    pub unregister_fd: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, fd: ::std::os::raw::c_int) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_posix_fd_support() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_posix_fd_support> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_posix_fd_support>(),
        24usize,
        concat!("Size of: ", stringify!(clap_host_posix_fd_support))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_posix_fd_support>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_posix_fd_support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).register_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_posix_fd_support),
            "::",
            stringify!(register_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modify_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_posix_fd_support),
            "::",
            stringify!(modify_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unregister_fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_posix_fd_support),
            "::",
            stringify!(unregister_fd)
        )
    );
}
pub type clap_host_posix_fd_support_t = clap_host_posix_fd_support;
extern "C" {
    pub static CLAP_EXT_RENDER: [::std::os::raw::c_char; 12usize];
}
pub const CLAP_RENDER_REALTIME: _bindgen_ty_13 = 0;
pub const CLAP_RENDER_OFFLINE: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub type clap_plugin_render_mode = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_render {
    pub has_hard_realtime_requirement:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, mode: clap_plugin_render_mode) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_render() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_render> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_render>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_render))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_render>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_render))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_hard_realtime_requirement) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_render),
            "::",
            stringify!(has_hard_realtime_requirement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_render),
            "::",
            stringify!(set)
        )
    );
}
pub type clap_plugin_render_t = clap_plugin_render;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_istream {
    pub ctx: *mut ::std::os::raw::c_void,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const clap_istream,
            buffer: *mut ::std::os::raw::c_void,
            size: u64,
        ) -> i64,
    >,
}
#[test]
fn bindgen_test_layout_clap_istream() {
    const UNINIT: ::std::mem::MaybeUninit<clap_istream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_istream>(),
        16usize,
        concat!("Size of: ", stringify!(clap_istream))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_istream>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_istream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_istream),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_istream),
            "::",
            stringify!(read)
        )
    );
}
pub type clap_istream_t = clap_istream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_ostream {
    pub ctx: *mut ::std::os::raw::c_void,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const clap_ostream,
            buffer: *const ::std::os::raw::c_void,
            size: u64,
        ) -> i64,
    >,
}
#[test]
fn bindgen_test_layout_clap_ostream() {
    const UNINIT: ::std::mem::MaybeUninit<clap_ostream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_ostream>(),
        16usize,
        concat!("Size of: ", stringify!(clap_ostream))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_ostream>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_ostream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_ostream),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_ostream),
            "::",
            stringify!(write)
        )
    );
}
pub type clap_ostream_t = clap_ostream;
extern "C" {
    pub static CLAP_EXT_STATE: [::std::os::raw::c_char; 11usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_state {
    pub save: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, stream: *const clap_ostream_t) -> bool,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, stream: *const clap_istream_t) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_state() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_state>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_state))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_state>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_state),
            "::",
            stringify!(save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_state),
            "::",
            stringify!(load)
        )
    );
}
pub type clap_plugin_state_t = clap_plugin_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_state {
    pub mark_dirty: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_state() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_state>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_state))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_state>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark_dirty) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_state),
            "::",
            stringify!(mark_dirty)
        )
    );
}
pub type clap_host_state_t = clap_host_state;
extern "C" {
    pub static CLAP_EXT_TAIL: [::std::os::raw::c_char; 10usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_tail {
    pub get: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
}
#[test]
fn bindgen_test_layout_clap_plugin_tail() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_tail> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_tail>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_tail))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_tail>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_tail))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_tail),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_tail_t = clap_plugin_tail;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_tail {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_tail() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_tail> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_tail>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_tail))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_tail>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_tail))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_tail),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_tail_t = clap_host_tail;
extern "C" {
    pub static CLAP_EXT_THREAD_CHECK: [::std::os::raw::c_char; 18usize];
}
#[doc = " @page thread-check\n\n CLAP defines two symbolic threads:\n\n main-thread:\n    This is the thread in which most of the interaction between the plugin and host happens.\n    It is usually the thread on which the GUI receives its events.\n    It isn't a realtime thread, yet this thread needs to respond fast enough to user interaction,\n    so it is recommended to run long and expensive tasks such as preset indexing or asset loading\n    in dedicated background threads.\n\n audio-thread:\n    This thread is used for realtime audio processing. Its execution should be as deterministic\n    as possible to meet the audio interface's deadline (can be <1ms). In other words, there is a\n    known set of operations that should be avoided: malloc() and free(), mutexes (spin mutexes\n    are worse), I/O, waiting, ...\n    The audio-thread is something symbolic, there isn't one OS thread that remains the\n    audio-thread for the plugin lifetime. As you may guess, the host is likely to have a\n    thread pool and the plugin.process() call may be scheduled on different OS threads over time.\n    The most important thing is that there can't be two audio-threads at the same time. All the\n    functions marked with [audio-thread] **ARE NOT CONCURRENT**. The host may mark any OS thread,\n    including the main-thread as the audio-thread, as long as it can guarentee that only one OS\n    thread is the audio-thread at a time. The audio-thread can be seen as a concurrency guard for\n    all functions marked with [audio-thread]."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_thread_check {
    pub is_main_thread:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub is_audio_thread:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
}
#[test]
fn bindgen_test_layout_clap_host_thread_check() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_thread_check> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_thread_check>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_thread_check))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_thread_check>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_thread_check))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_main_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_thread_check),
            "::",
            stringify!(is_main_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_audio_thread) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_thread_check),
            "::",
            stringify!(is_audio_thread)
        )
    );
}
#[doc = " @page thread-check\n\n CLAP defines two symbolic threads:\n\n main-thread:\n    This is the thread in which most of the interaction between the plugin and host happens.\n    It is usually the thread on which the GUI receives its events.\n    It isn't a realtime thread, yet this thread needs to respond fast enough to user interaction,\n    so it is recommended to run long and expensive tasks such as preset indexing or asset loading\n    in dedicated background threads.\n\n audio-thread:\n    This thread is used for realtime audio processing. Its execution should be as deterministic\n    as possible to meet the audio interface's deadline (can be <1ms). In other words, there is a\n    known set of operations that should be avoided: malloc() and free(), mutexes (spin mutexes\n    are worse), I/O, waiting, ...\n    The audio-thread is something symbolic, there isn't one OS thread that remains the\n    audio-thread for the plugin lifetime. As you may guess, the host is likely to have a\n    thread pool and the plugin.process() call may be scheduled on different OS threads over time.\n    The most important thing is that there can't be two audio-threads at the same time. All the\n    functions marked with [audio-thread] **ARE NOT CONCURRENT**. The host may mark any OS thread,\n    including the main-thread as the audio-thread, as long as it can guarentee that only one OS\n    thread is the audio-thread at a time. The audio-thread can be seen as a concurrency guard for\n    all functions marked with [audio-thread]."]
pub type clap_host_thread_check_t = clap_host_thread_check;
extern "C" {
    #[doc = " @page\n\n This extension lets the plugin use the host's thread pool.\n\n The plugin must provide @ref clap_plugin_thread_pool, and the host may provide @ref\n clap_host_thread_pool. If it doesn't, the plugin should process its data by its own means. In\n the worst case, a single threaded for-loop.\n\n Simple example with N voices to process\n\n @code\n void myplug_thread_pool_exec(const clap_plugin *plugin, uint32_t voice_index)\n {\n    compute_voice(plugin, voice_index);\n }\n\n void myplug_process(const clap_plugin *plugin, const clap_process *process)\n {\n    ...\n    bool didComputeVoices = false;\n    if (host_thread_pool && host_thread_pool.exec)\n       didComputeVoices = host_thread_pool.request_exec(host, plugin, N);\n\n    if (!didComputeVoices)\n       for (uint32_t i = 0; i < N; ++i)\n          myplug_thread_pool_exec(plugin, i);\n    ...\n }\n @endcode\n\n Be aware that using a thread pool may break hard real-time rules due to the thread\n synchronization involved.\n\n If the host knows that it is running under hard real-time pressure it may decide to not\n provide this interface."]
    pub static CLAP_EXT_THREAD_POOL: [::std::os::raw::c_char; 17usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_thread_pool {
    pub exec:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t, task_index: u32)>,
}
#[test]
fn bindgen_test_layout_clap_plugin_thread_pool() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_thread_pool> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_thread_pool>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_thread_pool))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_thread_pool>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_thread_pool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_thread_pool),
            "::",
            stringify!(exec)
        )
    );
}
pub type clap_plugin_thread_pool_t = clap_plugin_thread_pool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_thread_pool {
    pub request_exec: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, num_tasks: u32) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_thread_pool() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_thread_pool> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_thread_pool>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_thread_pool))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_thread_pool>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_thread_pool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_exec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_thread_pool),
            "::",
            stringify!(request_exec)
        )
    );
}
pub type clap_host_thread_pool_t = clap_host_thread_pool;
extern "C" {
    pub static CLAP_EXT_TIMER_SUPPORT: [::std::os::raw::c_char; 19usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_timer_support {
    pub on_timer: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, timer_id: clap_id),
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_timer_support() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_timer_support> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_timer_support>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_timer_support))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_timer_support>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_timer_support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_timer_support),
            "::",
            stringify!(on_timer)
        )
    );
}
pub type clap_plugin_timer_support_t = clap_plugin_timer_support;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_timer_support {
    pub register_timer: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            period_ms: u32,
            timer_id: *mut clap_id,
        ) -> bool,
    >,
    pub unregister_timer: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, timer_id: clap_id) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_timer_support() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_timer_support> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_timer_support>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_timer_support))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_timer_support>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_timer_support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).register_timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_timer_support),
            "::",
            stringify!(register_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unregister_timer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_timer_support),
            "::",
            stringify!(unregister_timer)
        )
    );
}
pub type clap_host_timer_support_t = clap_host_timer_support;
extern "C" {
    pub static CLAP_EXT_VOICE_INFO: [::std::os::raw::c_char; 16usize];
}
pub const CLAP_VOICE_INFO_SUPPORTS_OVERLAPPING_NOTES: _bindgen_ty_14 = 1;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_voice_info {
    pub voice_count: u32,
    pub voice_capacity: u32,
    pub flags: u64,
}
#[test]
fn bindgen_test_layout_clap_voice_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_voice_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_voice_info>(),
        16usize,
        concat!("Size of: ", stringify!(clap_voice_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_voice_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_voice_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voice_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_voice_info),
            "::",
            stringify!(voice_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voice_capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_voice_info),
            "::",
            stringify!(voice_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_voice_info),
            "::",
            stringify!(flags)
        )
    );
}
pub type clap_voice_info_t = clap_voice_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_voice_info {
    pub get: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, info: *mut clap_voice_info_t) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_voice_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_voice_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_voice_info>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_voice_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_voice_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_voice_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_voice_info),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_voice_info_t = clap_plugin_voice_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_voice_info {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_voice_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_voice_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_voice_info>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_voice_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_voice_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_voice_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_voice_info),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_voice_info_t = clap_host_voice_info;
extern "C" {
    pub static CLAP_EXT_AMBISONIC: [::std::os::raw::c_char; 23usize];
}
extern "C" {
    pub static CLAP_PORT_AMBISONIC: [::std::os::raw::c_char; 10usize];
}
pub const CLAP_AMBISONIC_FUMA: _bindgen_ty_15 = 0;
pub const CLAP_AMBISONIC_ACN: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const CLAP_AMBISONIC_NORMALIZATION_MAXN: _bindgen_ty_16 = 0;
pub const CLAP_AMBISONIC_NORMALIZATION_SN3D: _bindgen_ty_16 = 1;
pub const CLAP_AMBISONIC_NORMALIZATION_N3D: _bindgen_ty_16 = 2;
pub const CLAP_AMBISONIC_NORMALIZATION_SN2D: _bindgen_ty_16 = 3;
pub const CLAP_AMBISONIC_NORMALIZATION_N2D: _bindgen_ty_16 = 4;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_ambisonic_info {
    pub ordering: u32,
    pub normalization: u32,
}
#[test]
fn bindgen_test_layout_clap_ambisonic_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_ambisonic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_ambisonic_info>(),
        8usize,
        concat!("Size of: ", stringify!(clap_ambisonic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_ambisonic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_ambisonic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordering) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_ambisonic_info),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normalization) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_ambisonic_info),
            "::",
            stringify!(normalization)
        )
    );
}
pub type clap_ambisonic_info_t = clap_ambisonic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_ambisonic {
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            info: *mut clap_ambisonic_info_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_ambisonic() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_ambisonic> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_ambisonic>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_ambisonic))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_ambisonic>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_ambisonic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_ambisonic),
            "::",
            stringify!(get_info)
        )
    );
}
pub type clap_plugin_ambisonic_t = clap_plugin_ambisonic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_ambisonic {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_ambisonic() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_ambisonic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_ambisonic>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_ambisonic))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_ambisonic>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_ambisonic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_ambisonic),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_ambisonic_t = clap_host_ambisonic;
extern "C" {
    #[doc = " @page Audio Ports Activation\n\n This extension provides a way for the host to activate and de-activate audio ports.\n Deactivating a port provides the following benefits:\n - the plugin knows ahead of time that a given input is not present and can choose\n   an optimized computation path,\n - the plugin knows that an output is not consumed by the host, and doesn't need to\n   compute it.\n\n Audio ports can only be activated or deactivated when the plugin is deactivated, unless\n can_activate_while_processing() returns true.\n\n Audio buffers must still be provided if the audio port is deactivated.\n In such case, they shall be filled with 0 (or whatever is the neutral value in your context)\n and the constant_mask shall be set.\n\n Audio ports are initially in the active state after creating the plugin instance.\n Audio ports state are not saved in the plugin state, so the host must restore the\n audio ports state after creating the plugin instance.\n\n Audio ports state is invalidated by clap_plugin_audio_ports_config.select() and\n clap_host_audio_ports.rescan(CLAP_AUDIO_PORTS_RESCAN_LIST)."]
    pub static CLAP_EXT_AUDIO_PORTS_ACTIVATION: [::std::os::raw::c_char; 36usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports_activation {
    pub can_activate_while_processing:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub set_active: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            is_active: bool,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_audio_ports_activation() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_audio_ports_activation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_audio_ports_activation>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_audio_ports_activation))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_audio_ports_activation>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clap_plugin_audio_ports_activation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).can_activate_while_processing) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports_activation),
            "::",
            stringify!(can_activate_while_processing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_active) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_audio_ports_activation),
            "::",
            stringify!(set_active)
        )
    );
}
pub type clap_plugin_audio_ports_activation_t = clap_plugin_audio_ports_activation;
extern "C" {
    pub static CLAP_EXT_CONTEXT_MENU: [::std::os::raw::c_char; 26usize];
}
pub const CLAP_CONTEXT_MENU_TARGET_KIND_GLOBAL: _bindgen_ty_17 = 0;
pub const CLAP_CONTEXT_MENU_TARGET_KIND_PARAM: _bindgen_ty_17 = 1;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_target {
    pub kind: u32,
    pub id: clap_id,
}
#[test]
fn bindgen_test_layout_clap_context_menu_target() {
    const UNINIT: ::std::mem::MaybeUninit<clap_context_menu_target> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_context_menu_target>(),
        8usize,
        concat!("Size of: ", stringify!(clap_context_menu_target))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_context_menu_target>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_context_menu_target))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_target),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_target),
            "::",
            stringify!(id)
        )
    );
}
pub type clap_context_menu_target_t = clap_context_menu_target;
pub const CLAP_CONTEXT_MENU_ITEM_ENTRY: _bindgen_ty_18 = 0;
pub const CLAP_CONTEXT_MENU_ITEM_CHECK_ENTRY: _bindgen_ty_18 = 1;
pub const CLAP_CONTEXT_MENU_ITEM_SEPARATOR: _bindgen_ty_18 = 2;
pub const CLAP_CONTEXT_MENU_ITEM_BEGIN_SUBMENU: _bindgen_ty_18 = 3;
pub const CLAP_CONTEXT_MENU_ITEM_END_SUBMENU: _bindgen_ty_18 = 4;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub type clap_context_menu_item_kind_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_entry {
    pub label: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
    pub action_id: clap_id,
}
#[test]
fn bindgen_test_layout_clap_context_menu_entry() {
    const UNINIT: ::std::mem::MaybeUninit<clap_context_menu_entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_context_menu_entry>(),
        16usize,
        concat!("Size of: ", stringify!(clap_context_menu_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_context_menu_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_context_menu_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_entry),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_enabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_entry),
            "::",
            stringify!(is_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_entry),
            "::",
            stringify!(action_id)
        )
    );
}
pub type clap_context_menu_entry_t = clap_context_menu_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_check_entry {
    pub label: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
    pub is_checked: bool,
    pub action_id: clap_id,
}
#[test]
fn bindgen_test_layout_clap_context_menu_check_entry() {
    const UNINIT: ::std::mem::MaybeUninit<clap_context_menu_check_entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_context_menu_check_entry>(),
        16usize,
        concat!("Size of: ", stringify!(clap_context_menu_check_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_context_menu_check_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_context_menu_check_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_check_entry),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_enabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_check_entry),
            "::",
            stringify!(is_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_checked) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_check_entry),
            "::",
            stringify!(is_checked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_check_entry),
            "::",
            stringify!(action_id)
        )
    );
}
pub type clap_context_menu_check_entry_t = clap_context_menu_check_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_submenu {
    pub label: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
}
#[test]
fn bindgen_test_layout_clap_context_menu_submenu() {
    const UNINIT: ::std::mem::MaybeUninit<clap_context_menu_submenu> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_context_menu_submenu>(),
        16usize,
        concat!("Size of: ", stringify!(clap_context_menu_submenu))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_context_menu_submenu>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_context_menu_submenu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_submenu),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_enabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_submenu),
            "::",
            stringify!(is_enabled)
        )
    );
}
pub type clap_context_menu_submenu_t = clap_context_menu_submenu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_builder {
    pub ctx: *mut ::std::os::raw::c_void,
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *const clap_context_menu_builder,
            item_kind: clap_context_menu_item_kind_t,
            item_data: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub supports: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *const clap_context_menu_builder,
            item_kind: clap_context_menu_item_kind_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_context_menu_builder() {
    const UNINIT: ::std::mem::MaybeUninit<clap_context_menu_builder> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_context_menu_builder>(),
        24usize,
        concat!("Size of: ", stringify!(clap_context_menu_builder))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_context_menu_builder>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_context_menu_builder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_builder),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_item) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_builder),
            "::",
            stringify!(add_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supports) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_context_menu_builder),
            "::",
            stringify!(supports)
        )
    );
}
pub type clap_context_menu_builder_t = clap_context_menu_builder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_context_menu {
    pub populate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            target: *const clap_context_menu_target_t,
            builder: *const clap_context_menu_builder_t,
        ) -> bool,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            target: *const clap_context_menu_target_t,
            action_id: clap_id,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_context_menu() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_context_menu> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_context_menu>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_context_menu))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_context_menu>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_context_menu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).populate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_context_menu),
            "::",
            stringify!(populate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perform) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_context_menu),
            "::",
            stringify!(perform)
        )
    );
}
pub type clap_plugin_context_menu_t = clap_plugin_context_menu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_context_menu {
    pub populate: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            target: *const clap_context_menu_target_t,
            builder: *const clap_context_menu_builder_t,
        ) -> bool,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            target: *const clap_context_menu_target_t,
            action_id: clap_id,
        ) -> bool,
    >,
    pub can_popup: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub popup: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            target: *const clap_context_menu_target_t,
            screen_index: i32,
            x: i32,
            y: i32,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_context_menu() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_context_menu> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_context_menu>(),
        32usize,
        concat!("Size of: ", stringify!(clap_host_context_menu))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_context_menu>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_context_menu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).populate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_context_menu),
            "::",
            stringify!(populate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perform) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_context_menu),
            "::",
            stringify!(perform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_popup) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_context_menu),
            "::",
            stringify!(can_popup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_context_menu),
            "::",
            stringify!(popup)
        )
    );
}
pub type clap_host_context_menu_t = clap_host_context_menu;
extern "C" {
    pub static CLAP_EXT_CV: [::std::os::raw::c_char; 16usize];
}
extern "C" {
    pub static CLAP_PORT_CV: [::std::os::raw::c_char; 3usize];
}
pub const CLAP_CV_VALUE: _bindgen_ty_19 = 0;
pub const CLAP_CV_GATE: _bindgen_ty_19 = 1;
pub const CLAP_CV_PITCH: _bindgen_ty_19 = 2;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_cv {
    pub get_channel_type: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            channel_index: u32,
            channel_type: *mut u32,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_cv() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_cv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_cv>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_cv))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_cv>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_cv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_channel_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_cv),
            "::",
            stringify!(get_channel_type)
        )
    );
}
pub type clap_plugin_cv_t = clap_plugin_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_cv {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_cv() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_cv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_cv>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_cv))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_cv>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_cv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_cv),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_cv_t = clap_host_cv;
extern "C" {
    pub static CLAP_EXT_MIDI_MAPPINGS: [::std::os::raw::c_char; 27usize];
}
pub const CLAP_MIDI_MAPPING_CC7: _bindgen_ty_20 = 0;
pub const CLAP_MIDI_MAPPING_CC14: _bindgen_ty_20 = 1;
pub const CLAP_MIDI_MAPPING_RPN: _bindgen_ty_20 = 2;
pub const CLAP_MIDI_MAPPING_NRPN: _bindgen_ty_20 = 3;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub type clap_midi_mapping_type = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_midi_mapping {
    pub channel: i32,
    pub number: i32,
    pub param_id: clap_id,
}
#[test]
fn bindgen_test_layout_clap_midi_mapping() {
    const UNINIT: ::std::mem::MaybeUninit<clap_midi_mapping> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_midi_mapping>(),
        12usize,
        concat!("Size of: ", stringify!(clap_midi_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_midi_mapping>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_midi_mapping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_midi_mapping),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_midi_mapping),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_midi_mapping),
            "::",
            stringify!(param_id)
        )
    );
}
pub type clap_midi_mapping_t = clap_midi_mapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_midi_mappings {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            mapping: *mut clap_midi_mapping_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_midi_mappings() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_midi_mappings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_midi_mappings>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_midi_mappings))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_midi_mappings>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_midi_mappings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_midi_mappings),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_midi_mappings),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_midi_mappings_t = clap_plugin_midi_mappings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_midi_mappings {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[test]
fn bindgen_test_layout_clap_host_midi_mappings() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_midi_mappings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_midi_mappings>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_midi_mappings))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_midi_mappings>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_midi_mappings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_midi_mappings),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_host_midi_mappings_t = clap_host_midi_mappings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_color {
    pub alpha: u8,
    pub red: u8,
    pub green: u8,
    pub blue: u8,
}
#[test]
fn bindgen_test_layout_clap_color() {
    const UNINIT: ::std::mem::MaybeUninit<clap_color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_color>(),
        4usize,
        concat!("Size of: ", stringify!(clap_color))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_color>(),
        1usize,
        concat!("Alignment of ", stringify!(clap_color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_color),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_color),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).green) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_color),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blue) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_color),
            "::",
            stringify!(blue)
        )
    );
}
pub type clap_color_t = clap_color;
extern "C" {
    pub static CLAP_EXT_PARAM_INDICATION: [::std::os::raw::c_char; 30usize];
}
pub const CLAP_PARAM_INDICATION_AUTOMATION_NONE: _bindgen_ty_21 = 0;
pub const CLAP_PARAM_INDICATION_AUTOMATION_PRESENT: _bindgen_ty_21 = 1;
pub const CLAP_PARAM_INDICATION_AUTOMATION_PLAYING: _bindgen_ty_21 = 2;
pub const CLAP_PARAM_INDICATION_AUTOMATION_RECORDING: _bindgen_ty_21 = 3;
pub const CLAP_PARAM_INDICATION_AUTOMATION_OVERRIDING: _bindgen_ty_21 = 4;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_param_indication {
    pub set_mapping: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            has_mapping: bool,
            color: *const clap_color_t,
            label: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_automation: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            automation_state: u32,
            color: *const clap_color_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_param_indication() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_param_indication> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_param_indication>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_param_indication))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_param_indication>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_param_indication))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_mapping) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_param_indication),
            "::",
            stringify!(set_mapping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_automation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_param_indication),
            "::",
            stringify!(set_automation)
        )
    );
}
pub type clap_plugin_param_indication_t = clap_plugin_param_indication;
extern "C" {
    pub static CLAP_EXT_PRESET_LOAD: [::std::os::raw::c_char; 25usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_preset_load {
    pub from_file: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            path: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_preset_load() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_preset_load> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_preset_load>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_preset_load))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_preset_load>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_preset_load))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_preset_load),
            "::",
            stringify!(from_file)
        )
    );
}
pub type clap_plugin_preset_load_t = clap_plugin_preset_load;
extern "C" {
    pub static CLAP_EXT_REMOTE_CONTROLS: [::std::os::raw::c_char; 29usize];
}
pub const CLAP_REMOTE_CONTROLS_COUNT: _bindgen_ty_22 = 8;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_remote_controls_page {
    pub section_name: [::std::os::raw::c_char; 256usize],
    pub page_id: clap_id,
    pub page_name: [::std::os::raw::c_char; 256usize],
    pub param_ids: [clap_id; 8usize],
}
#[test]
fn bindgen_test_layout_clap_remote_controls_page() {
    const UNINIT: ::std::mem::MaybeUninit<clap_remote_controls_page> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_remote_controls_page>(),
        548usize,
        concat!("Size of: ", stringify!(clap_remote_controls_page))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_remote_controls_page>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_remote_controls_page))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_remote_controls_page),
            "::",
            stringify!(section_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_id) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_remote_controls_page),
            "::",
            stringify!(page_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_name) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_remote_controls_page),
            "::",
            stringify!(page_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_ids) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_remote_controls_page),
            "::",
            stringify!(param_ids)
        )
    );
}
pub type clap_remote_controls_page_t = clap_remote_controls_page;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_remote_controls {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            page_index: u32,
            page: *mut clap_remote_controls_page_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_remote_controls() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_remote_controls> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_remote_controls>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_remote_controls))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_remote_controls>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_remote_controls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_remote_controls),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_remote_controls),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_plugin_remote_controls_t = clap_plugin_remote_controls;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_remote_controls {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
    pub suggest_page:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, page_id: clap_id)>,
}
#[test]
fn bindgen_test_layout_clap_host_remote_controls() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_remote_controls> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_remote_controls>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_remote_controls))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_remote_controls>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_remote_controls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_remote_controls),
            "::",
            stringify!(changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggest_page) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_remote_controls),
            "::",
            stringify!(suggest_page)
        )
    );
}
pub type clap_host_remote_controls_t = clap_host_remote_controls;
extern "C" {
    pub static CLAP_EXT_RESOURCE_DIRECTORY: [::std::os::raw::c_char; 32usize];
}
#[doc = " @page Resource Directory\n\n This extension provides a way for the plugin to store its resources as file in a directory\n provided by the host and recover them later on.\n\n The plugin **must** store relative path in its state toward resource directories.\n\n Resource sharing:\n - shared directory is shared among all plugin instances, hence mostly appropriate for read-only\n content\n   -> suitable for read-only content\n - exclusive directory is exclusive to the plugin instance\n   -> if the plugin, then its exclusive directory must be duplicated too\n   -> suitable for read-write content\n\n Keeping the shared directory clean:\n - to avoid clashes in the shared directory, plugins are encourraged to organize their files in\n   sub-folders, for example create one subdirectory using the vendor name\n - don't use symbolic links or hard links which points outside of the directory\n\n Resource life-time:\n - exclusive folder content is managed by the plugin instance\n - exclusive folder content is deleted when the plugin instance is removed from the project\n - shared folder content isn't managed by the host, until all plugins using the shared directory\n   are removed from the project\n\n Note for the host\n - try to use the filesytem's copy-on-write feature when possible for reducing exclusive folder\n   space usage on duplication\n - host can \"garbage collect\" the files in the shared folder using:\n     clap_plugin_resource_directory.get_files_count()\n     clap_plugin_resource_directory.get_file_path()\n   but be **very** careful before deleting any resources"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_resource_directory {
    pub set_directory: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            path: *const ::std::os::raw::c_char,
            is_shared: bool,
        ),
    >,
    pub collect:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t, all: bool)>,
    pub get_files_count:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get_file_path: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            path: *mut ::std::os::raw::c_char,
            path_size: u32,
        ) -> i32,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_resource_directory() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_resource_directory> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_resource_directory>(),
        32usize,
        concat!("Size of: ", stringify!(clap_plugin_resource_directory))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_resource_directory>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_resource_directory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_directory) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_resource_directory),
            "::",
            stringify!(set_directory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_resource_directory),
            "::",
            stringify!(collect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_files_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_resource_directory),
            "::",
            stringify!(get_files_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_file_path) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_resource_directory),
            "::",
            stringify!(get_file_path)
        )
    );
}
#[doc = " @page Resource Directory\n\n This extension provides a way for the plugin to store its resources as file in a directory\n provided by the host and recover them later on.\n\n The plugin **must** store relative path in its state toward resource directories.\n\n Resource sharing:\n - shared directory is shared among all plugin instances, hence mostly appropriate for read-only\n content\n   -> suitable for read-only content\n - exclusive directory is exclusive to the plugin instance\n   -> if the plugin, then its exclusive directory must be duplicated too\n   -> suitable for read-write content\n\n Keeping the shared directory clean:\n - to avoid clashes in the shared directory, plugins are encourraged to organize their files in\n   sub-folders, for example create one subdirectory using the vendor name\n - don't use symbolic links or hard links which points outside of the directory\n\n Resource life-time:\n - exclusive folder content is managed by the plugin instance\n - exclusive folder content is deleted when the plugin instance is removed from the project\n - shared folder content isn't managed by the host, until all plugins using the shared directory\n   are removed from the project\n\n Note for the host\n - try to use the filesytem's copy-on-write feature when possible for reducing exclusive folder\n   space usage on duplication\n - host can \"garbage collect\" the files in the shared folder using:\n     clap_plugin_resource_directory.get_files_count()\n     clap_plugin_resource_directory.get_file_path()\n   but be **very** careful before deleting any resources"]
pub type clap_plugin_resource_directory_t = clap_plugin_resource_directory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_resource_directory {
    pub request_directory: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, is_shared: bool) -> bool,
    >,
    pub release_directory:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, is_shared: bool)>,
}
#[test]
fn bindgen_test_layout_clap_host_resource_directory() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_resource_directory> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_resource_directory>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_resource_directory))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_resource_directory>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_resource_directory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_directory) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_resource_directory),
            "::",
            stringify!(request_directory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_directory) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_resource_directory),
            "::",
            stringify!(release_directory)
        )
    );
}
pub type clap_host_resource_directory_t = clap_host_resource_directory;
extern "C" {
    pub static CLAP_EXT_STATE_CONTEXT: [::std::os::raw::c_char; 27usize];
}
pub const clap_plugin_state_context_type_CLAP_STATE_CONTEXT_FOR_DUPLICATE:
    clap_plugin_state_context_type = 1;
pub const clap_plugin_state_context_type_CLAP_STATE_CONTEXT_FOR_PRESET:
    clap_plugin_state_context_type = 2;
pub type clap_plugin_state_context_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_state_context {
    pub save: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            stream: *const clap_ostream_t,
            context_type: u32,
        ) -> bool,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            stream: *const clap_istream_t,
            context_type: u32,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_state_context() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_state_context> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_state_context>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_state_context))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_state_context>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_state_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_state_context),
            "::",
            stringify!(save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_state_context),
            "::",
            stringify!(load)
        )
    );
}
pub type clap_plugin_state_context_t = clap_plugin_state_context;
extern "C" {
    pub static CLAP_EXT_SURROUND: [::std::os::raw::c_char; 22usize];
}
extern "C" {
    pub static CLAP_PORT_SURROUND: [::std::os::raw::c_char; 9usize];
}
pub const CLAP_SURROUND_FL: _bindgen_ty_23 = 0;
pub const CLAP_SURROUND_FR: _bindgen_ty_23 = 1;
pub const CLAP_SURROUND_FC: _bindgen_ty_23 = 2;
pub const CLAP_SURROUND_LFE: _bindgen_ty_23 = 3;
pub const CLAP_SURROUND_BL: _bindgen_ty_23 = 4;
pub const CLAP_SURROUND_BR: _bindgen_ty_23 = 5;
pub const CLAP_SURROUND_FLC: _bindgen_ty_23 = 6;
pub const CLAP_SURROUND_FRC: _bindgen_ty_23 = 7;
pub const CLAP_SURROUND_BC: _bindgen_ty_23 = 8;
pub const CLAP_SURROUND_SL: _bindgen_ty_23 = 9;
pub const CLAP_SURROUND_SR: _bindgen_ty_23 = 10;
pub const CLAP_SURROUND_TC: _bindgen_ty_23 = 11;
pub const CLAP_SURROUND_TFL: _bindgen_ty_23 = 12;
pub const CLAP_SURROUND_TFC: _bindgen_ty_23 = 13;
pub const CLAP_SURROUND_TFR: _bindgen_ty_23 = 14;
pub const CLAP_SURROUND_TBL: _bindgen_ty_23 = 15;
pub const CLAP_SURROUND_TBC: _bindgen_ty_23 = 16;
pub const CLAP_SURROUND_TBR: _bindgen_ty_23 = 17;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_surround {
    pub get_channel_map: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            channel_map: *mut u8,
            channel_map_capacity: u32,
        ) -> u32,
    >,
    pub changed: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t)>,
}
#[test]
fn bindgen_test_layout_clap_plugin_surround() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_surround> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_surround>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_surround))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_surround>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_surround))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_channel_map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_surround),
            "::",
            stringify!(get_channel_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_surround),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_plugin_surround_t = clap_plugin_surround;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_surround {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
    pub get_preferred_channel_map: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            channel_map: *mut u8,
            channel_map_capacity: u32,
            channel_count: *mut u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_host_surround() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_surround> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_surround>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_surround))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_surround>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_surround))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_surround),
            "::",
            stringify!(changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_preferred_channel_map) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_surround),
            "::",
            stringify!(get_preferred_channel_map)
        )
    );
}
pub type clap_host_surround_t = clap_host_surround;
extern "C" {
    pub static CLAP_EXT_TRACK_INFO: [::std::os::raw::c_char; 24usize];
}
pub const CLAP_TRACK_INFO_HAS_TRACK_NAME: _bindgen_ty_24 = 1;
pub const CLAP_TRACK_INFO_HAS_TRACK_COLOR: _bindgen_ty_24 = 2;
pub const CLAP_TRACK_INFO_HAS_AUDIO_CHANNEL: _bindgen_ty_24 = 4;
pub const CLAP_TRACK_INFO_IS_FOR_RETURN_TRACK: _bindgen_ty_24 = 8;
pub const CLAP_TRACK_INFO_IS_FOR_BUS: _bindgen_ty_24 = 16;
pub const CLAP_TRACK_INFO_IS_FOR_MASTER: _bindgen_ty_24 = 32;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_track_info {
    pub flags: u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub color: clap_color_t,
    pub audio_channel_count: i32,
    pub audio_port_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_clap_track_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_track_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_track_info>(),
        280usize,
        concat!("Size of: ", stringify!(clap_track_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_track_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_track_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_track_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_track_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_track_info),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_channel_count) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_track_info),
            "::",
            stringify!(audio_channel_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_port_type) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_track_info),
            "::",
            stringify!(audio_port_type)
        )
    );
}
pub type clap_track_info_t = clap_track_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_track_info {
    pub changed: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t)>,
}
#[test]
fn bindgen_test_layout_clap_plugin_track_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_track_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_track_info>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_track_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_track_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_track_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_track_info),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_plugin_track_info_t = clap_plugin_track_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_track_info {
    pub get: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, info: *mut clap_track_info_t) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_track_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_track_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_track_info>(),
        8usize,
        concat!("Size of: ", stringify!(clap_host_track_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_track_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_track_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_track_info),
            "::",
            stringify!(get)
        )
    );
}
pub type clap_host_track_info_t = clap_host_track_info;
extern "C" {
    pub static CLAP_EXT_TRIGGERS: [::std::os::raw::c_char; 22usize];
}
pub const CLAP_TRIGGER_IS_AUTOMATABLE_PER_NOTE_ID: _bindgen_ty_25 = 1;
pub const CLAP_TRIGGER_IS_AUTOMATABLE_PER_KEY: _bindgen_ty_25 = 2;
pub const CLAP_TRIGGER_IS_AUTOMATABLE_PER_CHANNEL: _bindgen_ty_25 = 4;
pub const CLAP_TRIGGER_IS_AUTOMATABLE_PER_PORT: _bindgen_ty_25 = 8;
#[doc = " @page Trigger events\n\n This extension enables the plugin to expose a set of triggers to the host.\n\n Some examples for triggers:\n - trigger an envelope which is independent of the notes\n - trigger a sample-and-hold unit (maybe even per-voice)"]
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub type clap_trigger_info_flags = u32;
pub const CLAP_EVENT_TRIGGER: _bindgen_ty_26 = 0;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_trigger {
    pub header: clap_event_header_t,
    pub trigger_id: clap_id,
    pub cookie: *mut ::std::os::raw::c_void,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
}
#[test]
fn bindgen_test_layout_clap_event_trigger() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_trigger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_trigger>(),
        48usize,
        concat!("Size of: ", stringify!(clap_event_trigger))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_trigger>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_event_trigger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trigger_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(trigger_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(note_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_trigger),
            "::",
            stringify!(key)
        )
    );
}
pub type clap_event_trigger_t = clap_event_trigger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_trigger_info {
    pub id: clap_id,
    pub flags: clap_trigger_info_flags,
    pub cookie: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub module: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_clap_trigger_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_trigger_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_trigger_info>(),
        1296usize,
        concat!("Size of: ", stringify!(clap_trigger_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_trigger_info>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_trigger_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_trigger_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_trigger_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_trigger_info),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_trigger_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_trigger_info),
            "::",
            stringify!(module)
        )
    );
}
pub type clap_trigger_info_t = clap_trigger_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_triggers {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            trigger_info: *mut clap_trigger_info_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_plugin_triggers() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_triggers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_triggers>(),
        16usize,
        concat!("Size of: ", stringify!(clap_plugin_triggers))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_triggers>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_triggers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_triggers),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_triggers),
            "::",
            stringify!(get_info)
        )
    );
}
pub type clap_plugin_triggers_t = clap_plugin_triggers;
pub const CLAP_TRIGGER_RESCAN_INFO: _bindgen_ty_27 = 1;
pub const CLAP_TRIGGER_RESCAN_ALL: _bindgen_ty_27 = 2;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub type clap_trigger_rescan_flags = u32;
pub const CLAP_TRIGGER_CLEAR_ALL: _bindgen_ty_28 = 1;
pub const CLAP_TRIGGER_CLEAR_AUTOMATIONS: _bindgen_ty_28 = 2;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub type clap_trigger_clear_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_triggers {
    pub rescan: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, flags: clap_trigger_rescan_flags),
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            trigger_id: clap_id,
            flags: clap_trigger_clear_flags,
        ),
    >,
}
#[test]
fn bindgen_test_layout_clap_host_triggers() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_triggers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_triggers>(),
        16usize,
        concat!("Size of: ", stringify!(clap_host_triggers))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_triggers>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_triggers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rescan) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_triggers),
            "::",
            stringify!(rescan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_triggers),
            "::",
            stringify!(clear)
        )
    );
}
pub type clap_host_triggers_t = clap_host_triggers;
extern "C" {
    pub static CLAP_EXT_TUNING: [::std::os::raw::c_char; 20usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_tuning {
    pub header: clap_event_header_t,
    pub port_index: i16,
    pub channel: i16,
    pub tunning_id: clap_id,
}
#[test]
fn bindgen_test_layout_clap_event_tuning() {
    const UNINIT: ::std::mem::MaybeUninit<clap_event_tuning> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_event_tuning>(),
        24usize,
        concat!("Size of: ", stringify!(clap_event_tuning))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_event_tuning>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_event_tuning))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_tuning),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_tuning),
            "::",
            stringify!(port_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_tuning),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunning_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_event_tuning),
            "::",
            stringify!(tunning_id)
        )
    );
}
pub type clap_event_tuning_t = clap_event_tuning;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_tuning_info {
    pub tuning_id: clap_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub is_dynamic: bool,
}
#[test]
fn bindgen_test_layout_clap_tuning_info() {
    const UNINIT: ::std::mem::MaybeUninit<clap_tuning_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_tuning_info>(),
        264usize,
        concat!("Size of: ", stringify!(clap_tuning_info))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_tuning_info>(),
        4usize,
        concat!("Alignment of ", stringify!(clap_tuning_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tuning_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_tuning_info),
            "::",
            stringify!(tuning_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_tuning_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_dynamic) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_tuning_info),
            "::",
            stringify!(is_dynamic)
        )
    );
}
pub type clap_tuning_info_t = clap_tuning_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_tuning {
    pub changed: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t)>,
}
#[test]
fn bindgen_test_layout_clap_plugin_tuning() {
    const UNINIT: ::std::mem::MaybeUninit<clap_plugin_tuning> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_plugin_tuning>(),
        8usize,
        concat!("Size of: ", stringify!(clap_plugin_tuning))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_plugin_tuning>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_plugin_tuning))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_plugin_tuning),
            "::",
            stringify!(changed)
        )
    );
}
pub type clap_plugin_tuning_t = clap_plugin_tuning;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_tuning {
    pub get_relative: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            tuning_id: clap_id,
            channel: i32,
            key: i32,
            sample_offset: u32,
        ) -> f64,
    >,
    pub should_play: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            tuning_id: clap_id,
            channel: i32,
            key: i32,
        ) -> bool,
    >,
    pub get_tuning_count:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> u32>,
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            tuning_index: u32,
            info: *mut clap_tuning_info_t,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_clap_host_tuning() {
    const UNINIT: ::std::mem::MaybeUninit<clap_host_tuning> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clap_host_tuning>(),
        32usize,
        concat!("Size of: ", stringify!(clap_host_tuning))
    );
    assert_eq!(
        ::std::mem::align_of::<clap_host_tuning>(),
        8usize,
        concat!("Alignment of ", stringify!(clap_host_tuning))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_relative) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_tuning),
            "::",
            stringify!(get_relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).should_play) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_tuning),
            "::",
            stringify!(should_play)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_tuning_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_tuning),
            "::",
            stringify!(get_tuning_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clap_host_tuning),
            "::",
            stringify!(get_info)
        )
    );
}
pub type clap_host_tuning_t = clap_host_tuning;
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
